#!/usr/bin/env node

var fs    = require('fs');
var path  = require('path');

// default DEBUG if not set already
process.env.DEBUG = process.env.DEBUG || 'tinylr tinylr:*';
var debug = require('debug')('tinylr:cli');

var Server = require('tiny-lr').Server;
var opts = require('commander');

opts
  .version(require('../package').version)
  .option('port', '-p', 'Port to listen on (default: 35729)', Number)
  .option('pid', 'Path to the generated PID file (default: ./tiny-lr.pid)', String)
  .option('--cert <path>', 'Path to the TLS certificate file (default: ./cert.pem)', String)
  .option('--key <path>', 'Path to the TLS key file (default: ./key.pem)', String)
  .parse(process.argv);

opts.port = opts.port || 35729;
opts.pid = opts.pid || path.resolve('tiny-lr.pid');

// if it was required, don't start the server and expose the Server object.
if (module.parent) {
  module.exports = Server;
  return;
}

// Server

// Thanks to @FGRibreau for his very simple and very handy gist:
// https://gist.github.com/1846952

process.title = 'tiny-lr';

process.on('exit', function() {
  debug('... Closing server and removing PID file ...');
  // remove PID file and catch if unable to delete
  // must use unlinkSync because process exit must be synchronous
  try {
    fs.unlinkSync(opts.pid);
  }
  catch (e) {
    debug('... Unable to remove PID file (%s) ...', e.message);
  }
});

process.on('SIGTERM', function() {
  return process.exit(0);
});

process.on('SIGINT', function() {
  return process.exit(0);
});

var startServer = function() {
  var srv = new Server(opts);

  srv.on('close', function() {
    process.nextTick(function() {
      process.exit();
    });
  });

  srv.listen(opts.port, function(err) {
    fs.writeFile(opts.pid, String(process.pid), function(err) {
      if(err) {
        debug('... Cannot write pid file: %s', opts.pid);
        process.exit(1)
      }

      debug('... Listening on %s (pid: %s) ...', opts.port, String(process.pid));
      debug('... pid file: %s', opts.pid);
    });
  });
};

if (opts.key && opts.cert) {
  fs.readFile(opts.key, function(err,key) {
    if (err) {
      debug('Couldn\'t read key file (%s).', opts.key);
      debug(err);
      process.exit(1)
    }
    opts.key = key;
    fs.readFile(opts.cert, function(err,cert) {
      if (err) {
        debug('Couldn\'t read cert file (%s).', opts.cert);
        process.exit(1)
      }
      opts.cert = cert;
      startServer();
    });
  });
} else {
  startServer();
}
